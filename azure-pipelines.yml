name: "$(SourceBranchName)+$(BuildID)"

trigger:
  branches:
    include:
      - tags/refs/v*
  tags:
    include:
      - v*

pr:
  branches:
    include: ['*']

jobs:
  - job: build
    displayName: Build & Test
    timeoutInMinutes: 10
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - checkout: self

      - bash: |
          echo pri: $(System.PullRequest.PullRequestId)
          echo prn: $(System.PullRequest.PullRequestNumber)
          exit 1
        displayName: check PR vars


      - bash: echo "##vso[task.setvariable variable=BRANCH_NAME]`echo $(System.PullRequest.SourceBranch) | sed -r 's/[/|\\@":<>?*]+/-/g'`"
        displayName: Set and replace invalid characters in branch name

      - bash: 'echo "##vso[build.updatebuildnumber]$(BRANCH_NAME)+$(Build.BuildID)"'
        condition: eq(variables['Build.SourceBranchName'], 'merge')
        displayName: Update build ID if this is a pull request

      - bash: "wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -; curl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash -; sudo apt-get install -y nodejs"
        displayName: install node

#      - task: Cache@2
#        displayName: "Cache async-slowapp NPM Dependencies"
#        inputs:
#          key: '"$(Agent.OS)" | "node-async-slowapp" | proxies/async-slowapp/package-lock.json'
#          path: "proxies/async-slowapp/node_modules"
#          restoreKeys: |
#            "$(Agent.OS)" | "node-sandbox" | proxies/async-slowapp/package-lock.json'
#            "$(Agent.OS)" | "node-sandbox"
#
#      - task: Cache@2
#        displayName: "Cache sync-wrap NPM Dependencies"
#        inputs:
#          key: '"$(Agent.OS)" | "node-sync-wrap" | proxies/sync-wrap/package-lock.json'
#          path: "proxies/sync-wrap/node_modules"
#          restoreKeys: |
#            "$(Agent.OS)" | "node-sync-wrap" | proxies/sync-wrap/package-lock.json
#            "$(Agent.OS)" | "node-sync-wrap"

      - bash: "make install"
        displayName: install packages

      - bash: "make test-report"
        displayName: run tests

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: 'reports/tests/*.xml'
          failTaskOnFailedTests: true

      - bash: "make dist"
        displayName: build artifact

      - publish: dist/
        artifact: sync-wrap-$(Build.BuildNumber)
